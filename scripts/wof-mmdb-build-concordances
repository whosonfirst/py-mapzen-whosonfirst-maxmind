#!/usr/bin/env python
# -*-python-*-

import os
import sys
import csv
import logging

import mapzen.whosonfirst.api.client

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('--apikey', dest='apikey', action='store', default=None, help='A valid Mapzen API key')
    opt_parser.add_option('--countries', dest='countries', action='store', default=None, help='...')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    #

    lookup = {}

    countries = os.path.abspath(options.countries)
    fh = open(countries, "r")

    reader = csv.DictReader(fh)

    for row in reader:

        wofid = row['id']
        code = row['wof_country']

        lookup[code] = wofid

    #

    api = mapzen.whosonfirst.api.client.Mapzen(options.apikey)

    #

    mm_dump = os.path.abspath(args[0])

    fh = open(mm_dump, 'r')
    reader = csv.DictReader(fh)

    writer = csv.DictWriter(sys.stdout, fieldnames=('gn:id', 'wof:id', 'mm:city', 'mm:country', 'wof:possible'))
    writer.writeheader()

    for row in reader:

        # do we already know what this geonames ID is?

        method = 'whosonfirst.concordances.getById'
        args = { 'source': 'gn:id', 'id': row['geoname_id'] }

        try :
            rsp = api.execute_method(method, args)

            if rsp.get('stat', None) != "ok":
                logging.warning("failed to %s (%s) : %s" % (method, args, rsp))
                continue

        except Exception, e:

            logging.warning("failed to %s (%s) : %s" % (method, args, rsp))
            continue

        gnid = int(args['id'])
        iso = row['country_iso_code']

        out = {
            'gn:id': gnid,
            'mm:city': row.get('city_name',""),
            'mm:country': iso,
            'wof:id': -1,
            'wof:possible': '',
        }

        # bingo!

        if rsp['total'] == 1:
            out['wof:id'] = rsp['concordances'][0]['wof:id']
            writer.writerow(out)
            continue

        # because the concordances methods don't have existential filters yet...

        if rsp['total'] > 1:

            possible = []
            remaining = []

            for c in rsp['concordances']:
                possible.append(c['wof:id'])

            possible = ','.join(map(str, possible))

            method = 'whosonfirst.places.getInfoMulti'
            args2 = { 'ids': possible, 'extras': 'edtf:,mz:is_current,iso:' }

            places = []

            try:

                rsp = api.execute_method(method, args2)

                if rsp.get('stat', None) != "ok":
                    logging.warning("failed to %s (%s) : %s" % (method, args2, rsp))
                else:
                    rsp.get('places', [])

            except Exception, e:
                logging.warning("failed to %s (%s) : %s" % (method, args2, rsp))
                
            for pl in places:

                wofid = pl["wof:id"]

                if pl.get("mz:is_current", "-1") == "0":
                    print "-1 %s (%s) fails is current" % (wofid, iso)
                    continue

                if pl.get("edtf:deprecated", "uuuu") != "uuuu":
                    print "-1 %s (%s) fails deprecated" % (wofid, iso)
                    continue

                """
                if pl.get("iso:country", "XX") != iso:
                    print "-1 %s (%s) fails country" % (wofid, iso)
                    continue
                """

                remaining.append(pl)

            if len(remaining) == 1:

                out['wof:id'] = remaining[0]['wof:id']
                writer.writerow(out)
                continue
                
        # we don't even know what this place is called...

        if row.get('city_name', "") == '':
            writer.writerow(out)
            continue

        # let's see if we can tease out the place by name (and country)

        method = "whosonfirst.places.search"
        args = { "name": row["city_name"], "placetype": "locality" }

        country = row['country_iso_code'];
        country_id = lookup.get(country, None)

        if country_id:
            args["country_id"] = country_id

        try:
            rsp = api.execute_method(method, args)

            if rsp.get('stat', None) != "ok":
                logging.warning("failed to %s (%s) : %s" % (method, args, rsp))
                continue

        except Exception, e:

            logging.warning("failed to %s (%s) : %s" % (method, args, rsp))
            continue

        total = rsp["total"]

        # nothing...

        if total == 0:
            writer.writerow(out)
            continue

        # okay we got something

        if total == 1:

            try:
                out['wof:id'] = rsp['places'][0]['wof:id']
                writer.writerow(out)
                continue
            except Exception, e:
                logging.warning("WHAT...%s", e)
                logging.warning(rsp)

        # we got a bunch of something...

        maybe = []

        for r in rsp['places']:
            maybe.append(str(r['wof:id']))
            
        out['wof:id'] = -1
        out['wof:possible'] = ";".join(maybe)
            
        writer.writerow(out)
